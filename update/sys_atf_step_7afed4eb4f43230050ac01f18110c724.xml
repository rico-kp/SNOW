<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>Steven.J.Doubleday@kp.org</sys_created_by>
        <sys_created_on>2019-01-22 21:08:55</sys_created_on>
        <sys_id>7afed4eb4f43230050ac01f18110c724</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="Onboarding" source="x_293732_onboardin">891ecccd4ff5230050ac01f18110c7b1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Onboarding">891ecccd4ff5230050ac01f18110c7b1</sys_scope>
        <sys_update_name>sys_atf_step_7afed4eb4f43230050ac01f18110c724</sys_update_name>
        <sys_updated_by>reddymantrala@gmail.com</sys_updated_by>
        <sys_updated_on>2019-01-25 22:37:39</sys_updated_on>
        <table/>
        <test display_value="TPO variables for TPO order guide">ef4e10eb4f43230050ac01f18110c71d</test>
        <timeout/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=7afed4eb4f43230050ac01f18110c724"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>7afed4eb4f43230050ac01f18110c724</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>Steven.J.Doubleday@kp.org</sys_created_by>
        <sys_created_on>2019-01-22 21:08:55</sys_created_on>
        <sys_id>b1512c2f4f43230050ac01f18110c78c</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_updated_by>reddymantrala@gmail.com</sys_updated_by>
        <sys_updated_on>2019-01-25 22:37:39</sys_updated_on>
        <value>// You can use this step to execute a variety of server-side javascript tests including&#13;
// jasmine tests and custom assertions&#13;
//&#13;
//&#13;
// Pass or fail a step: Override the step outcome to pass or fail. This is ignored &#13;
//                      by jasmine tests&#13;
//&#13;
//  - Return true from the main function body to pass the step&#13;
//  - Return false from the main function body to fail the step&#13;
//&#13;
//&#13;
// outputs:       Pre-defined Step config Output variables to set on this step during &#13;
//                execution that are available to later steps&#13;
//&#13;
// steps(SYS_ID): A function to retrieve Output variable data from a step that executed&#13;
//                earlier in the test. The desired step's sys_id is required&#13;
//&#13;
//  Example:&#13;
//&#13;
//      // Test step 1 - add data&#13;
//      var gr = new GlideRecord('sc_task');&#13;
//      // this sample step's Step config has Output variables named table and record_id&#13;
//      outputs.table = 'sc_task';&#13;
//      outputs.record_id = gr.insert();&#13;
//&#13;
//      // Test step 2 - access added data and validate&#13;
//      // check that the record exists (or that business logic changed it)&#13;
//      var gr = new GlideRecord("sc_task");&#13;
//      gr.get(steps(PREVIOUS_STEP_SYS_ID).record_id);&#13;
//      assertEqual({name: "task gr exists", shouldbe: true, value: gr.isValidRecord()});&#13;
//&#13;
//&#13;
// stepResult.setOutputMessage: Log a message to step results after step executes.&#13;
//                              Can only be called once or will overwrite previous &#13;
//                              message&#13;
//&#13;
//  Example:&#13;
//&#13;
//      var gr = new GlideRecord('sc_task');&#13;
//      gr.setValue('short_description', 'verify task can be inserted');&#13;
//      var grSysId = gr.insert();&#13;
//      var justCreatedGR = new GlideRecord('sc_task');&#13;
//      if (justCreatedGR.get(grSysId)) {&#13;
//            stepResult.setOutputMessage("Successfully inserted task record");&#13;
//            return true; // pass the step&#13;
//      } else { &#13;
//            stepResult.setOutputMessage("Failed to insert task record");&#13;
//            return false; // fail the step&#13;
//      }&#13;
//&#13;
//&#13;
// Note: describe is only supported in Global scope.&#13;
// Use 'describe' to create a suite of test scripts and 'it' to define test expectations&#13;
//&#13;
//  Example jasmine test:&#13;
//&#13;
//      describe('my suite of script tests', function() {&#13;
//            it('should meet expectations', function() {&#13;
//                  expect(true).not.toBe(false);&#13;
//            });&#13;
//      });&#13;
//      // make sure to uncomment jasmine.getEnv().execute(); outside the function body&#13;
//&#13;
//&#13;
// assertEqual: A function used to compare that assertion.shouldbe == assertion.value;&#13;
//              in case of failure it throws an Error and logs that the assertion by&#13;
//              name has failed&#13;
//&#13;
//  Example:&#13;
//&#13;
//      var testAssertion = {&#13;
//            name: "my test assertion",&#13;
//            shouldbe: "expected value"&#13;
//            value: "actual value",&#13;
//      };&#13;
//      assertEqual(testAssertion); // throws Error, logs message to test step output&#13;
//&#13;
(function(outputs, steps, stepResult, assertEqual) {&#13;
    // add test script here&#13;
	gs.info("in TPO variables for TPO Order Guide");&#13;
	var grOrderGuide = new GlideRecord('sc_cat_item_guide'); &#13;
	grOrderGuide.addQuery('name', 'TPMG Onboarding Order Guide');&#13;
	grOrderGuide.query();&#13;
	if (grOrderGuide.next()) {&#13;
		gs.info("sysid for TPMG Onboarding Order Guide: "+grOrderGuide.sys_id);&#13;
        var gr = new GlideRecord('item_option_new');&#13;
	    gr.addQuery('cat_item', grOrderGuide.sys_id);&#13;
	    gr.query(); &#13;
		//expected number of variables&#13;
		gs.info("expected number of variables"+gr.getRowCount());&#13;
	    while (gr.next()) {&#13;
	    	 gs.info("found variable: "+gr.name);&#13;
&#13;
		&#13;
//  			if(!this.verifyVariable(gr.name, gr.type)){&#13;
// 				stepResult.setOutputMessage("Invalid Type of Variable found for TPMG Onboarding Order Guide");&#13;
// 				break;&#13;
// 			} &#13;
			&#13;
			if (!(gr.type =='7' || gr.type=='6')){&#13;
			//if(gr.type !='7'){&#13;
			stepResult.setOutputMessage("Invalid Type of Variable found for TPMG Onboarding Order Guide");&#13;
				stepResult.setFailed();&#13;
				return; &#13;
		}&#13;
			//assert (gr.type == '7' &amp;&amp; list.size() &gt; 0 ){&#13;
			//	gs.info("Condition is satisfied");&#13;
	&#13;
			//assert gr.type=='7': "Condition is satisfied";&#13;
			&#13;
	&#13;
           &#13;
			&#13;
			// or 'Single Line Text'&#13;
			// for each variable:&#13;
			//   expected name&#13;
			//   expected type of input &#13;
			&#13;
			//      var testAssertion = {&#13;
//            name: "my test assertion",&#13;
//            shouldbe: "expected value"&#13;
//            value: "actual value",&#13;
//      };&#13;
//      assertEqual(testAssertion); // throws Error, logs message to test step output&#13;
&#13;
	    }&#13;
		&#13;
	} else {&#13;
		stepResult.setOutputMessage("Unable to find sys_id for TPMG Onboarding Order Guide");&#13;
		return false; &#13;
	}&#13;
// 	  var step3_sys_id  = 'c5491b0b4f07a30050ac01f18110c727';&#13;
// 	  var step5_sys_id  = '76477f4f4f47a30050ac01f18110c70b';&#13;
// //	  var insert_step_sys_id = 'be58d23a4f0b630050ac01f18110c74d'; &#13;
// 	for (var key in steps(step3_sys_id)) {&#13;
// 		gs.info("key from steps "+step3_sys_id+" : "+key);&#13;
// 		gs.info(" value: "+steps(step3_sys_id)[key]);&#13;
// 	}&#13;
// 	  var table = steps(step3_sys_id).table; &#13;
// 	  var copiedRecordId = steps(step3_sys_id).record_id; &#13;
// 	gs.info("table: "+table);&#13;
// 	gs.info("Copied record: "+copiedRecordId); &#13;
//      var testAssertion = {&#13;
//            name: "expecting order guide table",&#13;
//            shouldbe: "sc_cat_item_guide",&#13;
//            value: table&#13;
//      };&#13;
//      assertEqual(testAssertion); // throws Error, logs message to test step output&#13;
  &#13;
	&#13;
	&#13;
// 		testAssertion.name = "populated data first name"; &#13;
// 		testAssertion.shouldbe = "ATFtest";	&#13;
// 		testAssertion.value = populatedData.u_first_name;&#13;
// 		assertEqual(testAssertion);&#13;
&#13;
	&#13;
	// asssert our table is sc_cat_item_guide&#13;
	// query item_option_new where sc_cat_item is our sc_cat_item_guide record&#13;
	// show each variable &#13;
})(outputs, steps, stepResult, assertEqual);&#13;
// uncomment the next line to execute this script as a jasmine test&#13;
jasmine.getEnv().execute();&#13;
// 	function  verifyVariable(name, variableType) {&#13;
// 				// two assertions go here &#13;
// 		if(variableType =='7' || variableType=='6'){&#13;
// 			return true; &#13;
// 		}&#13;
// 		 else &#13;
// 			 return false;&#13;
			&#13;
// 		}&#13;
&#13;
&#13;
// 	  outputs.table = "someTable"; &#13;
// 	      var testAssertion = {&#13;
//             name: "verify table is pending physicians",&#13;
//             shouldbe: "x_293732_onboardin_pending_physicians",&#13;
//             value: table &#13;
//       };&#13;
//       assertEqual(testAssertion);&#13;
	&#13;
//	  var gr = new GlideRecord(table); &#13;
&#13;
	&#13;
// 		var populator = new TpoOrderGuidePopulator(); &#13;
//  		var populatedData = populator.getTpoOrderGuideFieldValues(recordId); &#13;
// 		testAssertion.name = "populated data first name"; &#13;
// 		testAssertion.shouldbe = "ATFtest";	&#13;
// 		testAssertion.value = populatedData.u_first_name;&#13;
// 		assertEqual(testAssertion);&#13;
</value>
        <variable display_value="">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
</record_update>
